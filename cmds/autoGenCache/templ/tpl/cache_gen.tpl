// Code generated by goctl. DO NOT EDIT!

package {{.pkg}}

import (
    "autoGenCache/cachex"
	"context"
	"fmt"
	"github.com/zeromicro/go-zero/core/stores/cache"
)

var (
	{{.cacheKey}}
)

type (
	// An Options is used to store the cache options.
	Options struct {
	    QueryCtxFn QueryCtxFn
	}

	// Option defines the method to customize an Options.
	Option func(o *Options)
)

type (
    // QueryCtxFn defines the query method.
	QueryCtxFn func(ctx context.Context, v any{{if .args}}, {{.args}}{{end}}) error

	{{.lowerStartCamelObject}}Cache interface {
	    UpdateFromFn(ctx context.Context{{if .args}}, {{.args}}{{end}}, getData func() (*{{.ret_struct}}, error)) (any, error)
		FindOne(ctx context.Context{{if .args}}, {{.args}}{{end}}) (*{{.ret_struct}}, error)
		Delete(ctx context.Context{{if .args}}, {{.args}}{{end}}) error
		SetOptions(opts ...Option)
	}

	default{{.upperStartCamelObject}}Cache struct {
		cachex.CachedConn
		Options
	}
)

func new{{.upperStartCamelObject}}Cache(c cache.CacheConf, opts ...cache.Option) *default{{.upperStartCamelObject}}Cache {
    m := &default{{.upperStartCamelObject}}Cache{
        CachedConn: cachex.NewConn(c, opts...),
    }
    m.SetOptions()
    return m
}

// UpdateFromFn
/** like:
	threading.GoSafe(func() {
	    ctx := context.Background()
        data, err := viewPlayerInfoCache.UpdateFromFn(ctx{{if .args}}, args{{end}}, func() (any, error) {
            res := "add your logic here"
            return res, nil
        })
        if err != nil {
            logx.WithContext(ctx).Error("UpdateFromFn", logx.Field("err", err))
            return
        }
        res, ok := data.(*{{.ret_struct}})
        if !ok {
	        logx.WithContext(ctx).Errorf("UpdateFromFn expect *{{.ret_struct}} but get %T", res)
	        return
        }
        logx.Infof("UpdateFromFn res: ", res)
    })
*/
func (m *default{{.upperStartCamelObject}}Cache) UpdateFromFn(ctx context.Context{{if .args}}, {{.args}}{{end}}, getData func() (*{{.ret_struct}}, error)) (any, error) {
	data, err := m.SetCacheCtxFromFn(ctx, m.formatKey({{.args_use}}), func() (any, error) {
        return getData()
    })
    return data, err
}

func (m *default{{.upperStartCamelObject}}Cache) FindOne(ctx context.Context{{if .args}}, {{.args}}{{end}}) (*{{.ret_struct}}, error) {
	var resp {{.ret_struct}}
	key := m.formatKey({{.args_use}})
	err := m.QueryRowCtx(ctx, &resp, key, func(ctx context.Context, v any) (err error) {
		ctx, span := cachex.StartSpan(ctx, "QueryRow")
		defer func() {
			cachex.EndSpan(span, err)
		}()
        return m.QueryCtxFn(ctx, v{{if .args_use}}, {{.args_use}}{{end}})
	})
	switch err {
	case nil:
		return &resp, nil
	default:
		return nil, err
	}
}

func (m *default{{.upperStartCamelObject}}Cache) Delete(ctx context.Context{{if .args}}, {{.args}}{{end}}) error {
	_, err := m.ExecCtx(ctx, execDelCtxFn, m.formatKey({{.args_use}}))
	return err
}

func (m *default{{.upperStartCamelObject}}Cache) formatKey(args ...any) string {
	key := {{.cacheKeyField}}
	for _, arg := range args {
		key = fmt.Sprintf("%s:%v", key, arg)
	}
	return key
}

func (m *default{{.upperStartCamelObject}}Cache) SetOptions(opts ...Option) {
	for _, opt := range opts {
		opt(&m.Options)
	}
	if m.QueryCtxFn == nil {
		m.QueryCtxFn = queryCtxFn
	}
}

// WithQueryCtxFn returns a func to customize an Options with given query.
func WithQueryCtxFn(query QueryCtxFn) Option {
	return func(o *Options) {
		o.QueryCtxFn = query
	}
}
