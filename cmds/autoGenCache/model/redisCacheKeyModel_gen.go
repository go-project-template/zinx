// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"fmt"
	"github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"strings"
)

var (
	redisCacheKeyFieldNames = builder.RawFieldNames(&RedisCacheKey{})
	redisCacheKeyRows       = strings.Join(redisCacheKeyFieldNames, ",")
)

type (
	redisCacheKeyModel interface {
		FindOne(ctx context.Context, id int64) (*RedisCacheKey, error)
		SelectBuilder() squirrel.SelectBuilder
		FindAll(ctx context.Context, rowBuilder squirrel.SelectBuilder, orderBy string) ([]*RedisCacheKey, error)
	}

	defaultRedisCacheKeyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RedisCacheKey struct {
		Id             int64  `db:"id"`
		Prefix1        string `db:"prefix1"` // 一级模块/包名
		Prefix2        string `db:"prefix2"` // 二级模块/文件名
		Prefix3        string `db:"prefix3"` // 额外字段
		Prefix4        string `db:"prefix4"`
		Prefix5        string `db:"prefix5"`
		Prefix6        string `db:"prefix6"`
		ArgInt64       string `db:"arg_int64"`
		ArgString      string `db:"arg_string"`
		RetStruct      string `db:"ret_struct"`       // 返回的数据结构(int32、string、proto.xx、etc...)
		Expiry         int64  `db:"expiry"`           // 有效期（秒）默认7天
		NotFountExpiry int64  `db:"not_fount_expiry"` // 空数据占位有效期（秒）默认1分钟
	}
)

func newRedisCacheKeyModel(conn sqlx.SqlConn) *defaultRedisCacheKeyModel {
	return &defaultRedisCacheKeyModel{
		conn:  conn,
		table: "`redis_cache_key`",
	}
}

func (m *defaultRedisCacheKeyModel) FindOne(ctx context.Context, id int64) (*RedisCacheKey, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", redisCacheKeyRows, m.table)
	var resp RedisCacheKey
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRedisCacheKeyModel) FindAll(ctx context.Context, builder squirrel.SelectBuilder, orderBy string) ([]*RedisCacheKey, error) {

	builder = builder.Columns(redisCacheKeyRows)

	if orderBy == "" {
		builder = builder.OrderBy("id DESC")
	} else {
		builder = builder.OrderBy(orderBy)
	}

	query, values, err := builder.ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*RedisCacheKey

	err = m.conn.QueryRowsCtx(ctx, &resp, query, values...)

	switch err {
	case nil:
		return resp, nil
	default:
		return nil, err
	}
}

func (m *defaultRedisCacheKeyModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}

func (m *defaultRedisCacheKeyModel) tableName() string {
	return m.table
}
