// Code generated by exceltool. DO NOT EDIT!
package cfg

import (
	"encoding/json"
	"fmt"
	"os"

	"github.com/zeromicro/go-zero/core/logx"
)

// {{.FileName}} - {{.SheetName}}
type {{.StructName}} struct {
    {{- range .Fields}}
    {{- if eq .InServer true }}
    {{.Name}}  {{.Type}} // {{.Desc}}
    {{- else }}
    {{- end }} {{- end }}
}

var _{{.StructName}}Map = make(map[{{.IdType}}]*{{.StructName}})
var _{{.StructName}}Ary []*{{.StructName}}

func init{{.StructName}}() {
	fileName := "./conf/excel/{{.StructName}}.json"
	bytes, err := os.ReadFile(fileName)
	if err != nil {
		panic(fmt.Errorf("Fatal error config file: %s \n", err))
	}
	if err := json.Unmarshal(bytes, &_{{.StructName}}Ary); err != nil {
		panic(err)
	}
	for _, _{{.StructName}} := range _{{.StructName}}Ary {
		_{{.StructName}}Map[_{{.StructName}}.Id] = _{{.StructName}}
	}
}

func Get{{.StructName}}Map() map[{{.IdType}}]*{{.StructName}} {
	return _{{.StructName}}Map
}

func Get{{.StructName}}Ary() []*{{.StructName}} {
	return _{{.StructName}}Ary
}

func Get{{.StructName}}ById(id {{.IdType}}) (item *{{.StructName}}) {
	item = _{{.StructName}}Map[id]
	if item == nil {
		logx.Errorf("Get{{.StructName}}ByID fail: %d ", id)
	}
	return item
}

func Get{{.StructName}}ByIndex(idx int) (item *{{.StructName}}) {
	lens := len(_{{.StructName}}Ary)
	if lens <=0 || idx >= lens {
		logx.Errorf("Get{{.StructName}}ByIndex fail: %d ", idx)
	    return nil
	}
	return _{{.StructName}}Ary[idx]
}
