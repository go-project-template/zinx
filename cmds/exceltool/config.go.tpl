// Code generated by exceltool. DO NOT EDIT!
package cfg

import (
	"encoding/json"
	"fmt"
	"os"

	"github.com/zeromicro/go-zero/core/logx"
)

 {{- range .Structs}}
type {{.StructName}} struct {
    {{- range .Fields}}
    {{- if eq .FieldName "Id" }}
    {{- else }}
    {{.FieldName}}  {{.FieldType}} `json:"{{.FieldJson}}"` // {{.FieldDesc}}
    {{- end }} {{- end }}
}
{{- end }}

type {{.StructName}} struct {
    {{- range .Fields}}
    {{- if eq .FieldType "bool" }}
    {{.FieldName}}  *{{.FieldType}} `json:"{{.FieldJson}}"` // {{.FieldDesc}}
    {{- else }}
    {{.FieldName}}  {{.FieldType}} `json:"{{.FieldJson}}"` // {{.FieldDesc}}
    {{- end }} {{- end }}
}

var {{.StructName}}Map map[{{.IDType}}]*{{.StructName}}
var {{.StructName}}Ary []*{{.StructName}}

func init{{.StructName}}() {
	fileName := "./conf/game/{{.StructName}}.json"
	bytes, err := os.ReadFile(fileName)
	if err != nil {
		panic(fmt.Errorf("Fatal error config file: %s \n", err))
	}
	if err := json.Unmarshal(bytes, &{{.StructName}}Map); err != nil {
		panic(err)
	}
	{{.StructName}}Ary = make([]*{{.StructName}}, 0, len({{.StructName}}Map))
	for _, item := range {{.StructName}}Map {
        {{.StructName}}Ary = append({{.StructName}}Ary, item)
    }
}

func Get{{.StructName}}Map() map[{{.IDType}}]*{{.StructName}} {
	return {{.StructName}}Map
}

func Get{{.StructName}}Ary() []*{{.StructName}} {
	return {{.StructName}}Ary
}

func Get{{.StructName}}ByID(id {{.IDType}}) (item *{{.StructName}}) {
	item = {{.StructName}}Map[id]
	if item == nil {
		logx.Errorf("Get{{.StructName}}ByID fail: %d ", id)
	}
	return item
}

func Get{{.StructName}}ByIndex(idx int) (item *{{.StructName}}) {
	lens := len({{.StructName}}Ary)
	if lens <=0 || idx >= lens {
		logx.Errorf("Get{{.StructName}}ByIndex fail: %d ", idx)
	    return nil
	}
	return {{.StructName}}Ary[idx]
}
