// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userRoleidPoolFieldNames          = builder.RawFieldNames(&UserRoleidPool{})
	userRoleidPoolRows                = strings.Join(userRoleidPoolFieldNames, ",")
	userRoleidPoolRowsExpectAutoSet   = strings.Join(stringx.Remove(userRoleidPoolFieldNames, "`create_time`", "`update_time`"), ",")
	userRoleidPoolRowsWithPlaceHolder = strings.Join(stringx.Remove(userRoleidPoolFieldNames, "`role_id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	userRoleidPoolModel interface {
		TxFindOneUnuse(ctx context.Context, session sqlx.Session, roleId int64) (*UserRoleidPool, error)
		Update(ctx context.Context, session sqlx.Session, data *UserRoleidPool) (sql.Result, error)
		Trans(ctx context.Context, fn func(context context.Context, session sqlx.Session) error) error
		SelectBuilder() squirrel.SelectBuilder
		Delete(ctx context.Context, session sqlx.Session, roleId int64) error
	}

	defaultUserRoleidPoolModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserRoleidPool struct {
		RoleId int64 `db:"role_id"`
		IsUse  int64 `db:"is_use"`
	}
)

func newUserRoleidPoolModel(conn sqlx.SqlConn) *defaultUserRoleidPoolModel {
	return &defaultUserRoleidPoolModel{
		conn:  conn,
		table: "`user_roleid_pool`",
	}
}

func (m *defaultUserRoleidPoolModel) TxFindOneUnuse(ctx context.Context, session sqlx.Session,roleId int64) (*UserRoleidPool, error) {
	query := fmt.Sprintf("select %s from %s where role_id = ? and is_use = 0 FOR UPDATE;", userRoleidPoolRows, m.table)
	var resp UserRoleidPool
	err := m.conn.QueryRowCtx(ctx, &resp, query,roleId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserRoleidPoolModel) Update(ctx context.Context, session sqlx.Session, data *UserRoleidPool) (sql.Result, error) {
	query := fmt.Sprintf("update %s set %s where `role_id` = ?", m.table, userRoleidPoolRowsWithPlaceHolder)
	if session != nil {
		return session.ExecCtx(ctx, query, data.IsUse, data.RoleId)
	}
	return m.conn.ExecCtx(ctx, query, data.IsUse, data.RoleId)
}

func (m *defaultUserRoleidPoolModel) Trans(ctx context.Context, fn func(ctx context.Context, session sqlx.Session) error) error {

	return m.conn.TransactCtx(ctx, func(ctx context.Context, session sqlx.Session) error {
		return fn(ctx, session)
	})

}

func (m *defaultUserRoleidPoolModel) SelectBuilder() squirrel.SelectBuilder {
	return squirrel.Select().From(m.table)
}
func (m *defaultUserRoleidPoolModel) Delete(ctx context.Context, session sqlx.Session, roleId int64) error {
	query := fmt.Sprintf("delete from %s where `role_id` = ?", m.table)
	if session != nil {
		_, err := session.ExecCtx(ctx, query, roleId)
		return err
	}
	_, err := m.conn.ExecCtx(ctx, query, roleId)
	return err
}

func (m *defaultUserRoleidPoolModel) tableName() string {
	return m.table
}
