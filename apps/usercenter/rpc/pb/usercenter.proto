syntax = "proto3";

option go_package = "./pb";

package pb;

// model
message User {
  int64 accountId = 1;
  string mobile = 2;
}

message UserAuth {
  int64 accountId = 2;
  string authType = 3;
  string authKey = 4;
}

// req „ÄÅresp
message RegisterReq {
  string mobile = 1;
  string password = 3;
  string authKey = 4;
  string authType = 5;
}
message RegisterResp {
  string accessToken = 1;
  int64 accessExpire = 2;
  int64 refreshAfter = 3;
}

message LoginReq {
  string authType = 1;
  string authKey = 2;
  string password = 3;
}
message LoginResp {
  string accessToken = 1;
  int64 accessExpire = 2;
  int64 refreshAfter = 3;
}
message GetUserInfoReq { int64 accountId = 1; }
message GetUserInfoResp { User user = 1; }
message GetUserAuthByAuthKeyReq {
  string authKey = 1;
  string authType = 2;
}
message GetUserAuthByAuthKeyResp { UserAuth userAuth = 1; }

message GetUserAuthByAccountIdReq {
  int64 accountId = 1;
  string authType = 2;
}
message GetUserAuthyAccountIdResp { UserAuth userAuth = 1; }

message GenerateTokenReq { int64 accountId = 1; }
message GenerateTokenResp {
  string accessToken = 1;
  int64 accessExpire = 2;
  int64 refreshAfter = 3;
}

message CreateRoleReq {
  int64 accountId = 1;
  string nickname = 2;
  int32 sex = 3;
}
message CreateRoleResp { int64 roleId = 1; }

message GetRoleInfoReq { int64 accountId = 1; }
message GetRoleInfoResp {
  int64 roleId = 1;
  string nickname = 2;
}

// service
service usercenter {
  rpc login(LoginReq) returns (LoginResp);
  rpc register(RegisterReq) returns (RegisterResp);
  rpc getUserInfo(GetUserInfoReq) returns (GetUserInfoResp);
  rpc getUserAuthByAuthKey(GetUserAuthByAuthKeyReq)
      returns (GetUserAuthByAuthKeyResp);
  rpc getUserAuthByAccountId(GetUserAuthByAccountIdReq)
      returns (GetUserAuthyAccountIdResp);
  rpc generateToken(GenerateTokenReq) returns (GenerateTokenResp);
  rpc createRole(CreateRoleReq) returns (CreateRoleResp);
  rpc getRoleInfo(GetRoleInfoReq) returns (GetRoleInfoResp);
}