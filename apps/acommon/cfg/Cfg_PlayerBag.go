// Code generated by exceltool. DO NOT EDIT!
package cfg

import (
	"encoding/json"
	"fmt"
	"os"

	"github.com/zeromicro/go-zero/core/logx"
)

// 道具.xlsx - 道具配置
type Cfg_PlayerBag struct {
	Id         int32 // Cfg_PlayerBag
	MaxBagSize int32 // 背包最大上限
}

var _Cfg_PlayerBagMap = make(map[int32]*Cfg_PlayerBag)
var _Cfg_PlayerBagAry []*Cfg_PlayerBag

func initCfg_PlayerBag() {
	fileName := "./conf/excel/Cfg_PlayerBag.json"
	bytes, err := os.ReadFile(fileName)
	if err != nil {
		panic(fmt.Errorf("Fatal error config file: %s \n", err))
	}
	if err := json.Unmarshal(bytes, &_Cfg_PlayerBagAry); err != nil {
		panic(err)
	}
	for _, _Cfg_PlayerBag := range _Cfg_PlayerBagAry {
		_Cfg_PlayerBagMap[_Cfg_PlayerBag.Id] = _Cfg_PlayerBag
	}
}

func GetCfg_PlayerBagMap() map[int32]*Cfg_PlayerBag {
	return _Cfg_PlayerBagMap
}

func GetCfg_PlayerBagAry() []*Cfg_PlayerBag {
	return _Cfg_PlayerBagAry
}

func GetCfg_PlayerBagById(id int32) (item *Cfg_PlayerBag) {
	item = _Cfg_PlayerBagMap[id]
	if item == nil {
		logx.Errorf("GetCfg_PlayerBagByID fail: %d ", id)
	}
	return item
}

func GetCfg_PlayerBagByIndex(idx int) (item *Cfg_PlayerBag) {
	lens := len(_Cfg_PlayerBagAry)
	if lens <= 0 || idx >= lens {
		logx.Errorf("GetCfg_PlayerBagByIndex fail: %d ", idx)
		return nil
	}
	return _Cfg_PlayerBagAry[idx]
}
