// Code generated by exceltool. DO NOT EDIT!
package cfg

import (
	"fmt"
	"github.com/fsnotify/fsnotify"
	"github.com/spf13/viper"
	"math/rand"
)

type Item struct {
	Id        int32  `json:"id"`        // Item
	Name      string `json:"name"`      // 名字
	Desc      string `json:"desc"`      // 描述
	Level     int32  `json:"level"`     // 等级
	Quality   int32  `json:"quality"`   // 品质
	Types     int32  `json:"types"`     // 类型
	BindType  int32  `json:"BindType"`  // 绑定类型
	StackType int32  `json:"StackType"` // 叠加类型
	StackSize int64  `json:"StackSize"` // 最大叠加数量
	EquipSlot int32  `json:"equipSlot"` // 装备位置
	Icon      string `json:"icon"`      // 图标
}

var ItemMap map[int32]Item
var ItemAry []Item

func initItem() {
	v := viper.New()
	v.SetConfigFile("./conf/game/Item.json")
	v.SetConfigType("json")
	err := v.ReadInConfig()
	if err != nil {
		panic(fmt.Errorf("Fatal error config file: %s \n", err))
	}
	v.WatchConfig()

	v.OnConfigChange(func(e fsnotify.Event) {
		if err := v.Unmarshal(&ItemMap); err != nil {
			fmt.Println(err)
		}
	})
	if err := v.Unmarshal(&ItemMap); err != nil {
		panic(err)
	}
	ItemAry = make([]Item, 0, len(ItemMap))
	for _, item := range ItemMap {
		ItemAry = append(ItemAry, item)
	}
}

func GetItemMap() map[int32]Item {
	return ItemMap
}

func GetItemAry() []Item {
	return ItemAry
}

func GetItemByID(id int32) (Item, bool) {
	item, ok := ItemMap[id]
	return item, ok
}

func GetItemByIndex(idx int) (item Item, ok bool) {
	lens := len(ItemAry)
	if lens <= 0 || idx >= lens {
		return
	}
	return ItemAry[idx], true
}

func GetRandItem() (item Item, ok bool) {
	lens := len(ItemAry)
	if lens <= 0 {
		return
	}
	return ItemAry[rand.Intn(lens)], true
}
