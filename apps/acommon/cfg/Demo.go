// Code generated by exceltool. DO NOT EDIT!
package cfg

import (
	"encoding/json"
	"fmt"
	"os"

	"github.com/zeromicro/go-zero/core/logx"
)

type DemoObj struct {
	ProductionId int32 `json:"productionId"` // 物品ID
	Amount       int32 `json:"amount"`       // 消耗物品数量
}

type Demo struct {
	Id      int32             `json:"id"`      // Demo
	Name    string            `json:"name"`    // 名字
	StrAry  []string          `json:"strAry"`  // 数组
	Num     int32             `json:"num"`     // 数字
	CanSee  int32             `json:"canSee"`  // 是否可见
	MoreAry [][]int32         `json:"moreAry"` // 二维数组
	Obj     map[int32]DemoObj `json:"obj"`     // 对象
}

var DemoMap map[int32]*Demo
var DemoAry []*Demo

func initDemo() {
	fileName := "./conf/game/Demo.json"
	bytes, err := os.ReadFile(fileName)
	if err != nil {
		panic(fmt.Errorf("Fatal error config file: %s \n", err))
	}
	if err := json.Unmarshal(bytes, &DemoMap); err != nil {
		panic(err)
	}
	DemoAry = make([]*Demo, 0, len(DemoMap))
	for _, item := range DemoMap {
		DemoAry = append(DemoAry, item)
	}
}

func GetDemoMap() map[int32]*Demo {
	return DemoMap
}

func GetDemoAry() []*Demo {
	return DemoAry
}

func GetDemoByID(id int32) (item *Demo) {
	item = DemoMap[id]
	if item == nil {
		logx.Errorf("GetDemoByID fail: %d ", id)
	}
	return item
}

func GetDemoByIndex(idx int) (item *Demo) {
	lens := len(DemoAry)
	if lens <= 0 || idx >= lens {
		logx.Errorf("GetDemoByIndex fail: %d ", idx)
		return nil
	}
	return DemoAry[idx]
}
